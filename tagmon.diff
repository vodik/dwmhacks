--- a/dwm.c	05:58:16.685464754 -0500
+++ b/dwm.c	2009-11-28 06:03:23.384599060 -0500
@@ -204,7 +204,7 @@
 static void restack(Monitor *m);
 static void run(void);
 static void scan(void);
-static void sendmon(Client *c, Monitor *m);
+static void sendmon(Client *c, Monitor *m, Bool readrules);
 static void setclientstate(Client *c, long state);
 static void setlayout(const Arg *arg);
 static void setmfact(const Arg *arg);
@@ -1234,7 +1234,7 @@
 	} while(ev.type != ButtonRelease);
 	XUngrabPointer(dpy, CurrentTime);
 	if((m = ptrtomon(c->x + c->w / 2, c->y + c->h / 2)) != selmon) {
-		sendmon(c, m);
+		sendmon(c, m, False);
 		selmon = m;
 		focus(NULL);
 	}
@@ -1355,7 +1355,7 @@
 	XUngrabPointer(dpy, CurrentTime);
 	while(XCheckMaskEvent(dpy, EnterWindowMask, &ev));
 	if((m = ptrtomon(c->x + c->w / 2, c->y + c->h / 2)) != selmon) {
-		sendmon(c, m);
+		sendmon(c, m, False);
 		selmon = m;
 		focus(NULL);
 	}
@@ -1423,14 +1423,39 @@
 }
 
 void
-sendmon(Client *c, Monitor *m) {
+sendmon(Client *c, Monitor *m, Bool readrules) {
+	const char *class, *instance;
+	unsigned int i;
+	const Rule *r;
+	XClassHint ch = { 0 };
+
 	if(c->mon == m)
 		return;
 	unfocus(c);
 	detach(c);
 	detachstack(c);
 	c->mon = m;
-	c->tags = m->tagset[m->seltags]; /* assign tags of target monitor */
+	if (!readrules) {
+		c->tags = m->tagset[m->seltags];
+	} else {
+		c->tags = 0;
+		if(XGetClassHint(dpy, c->win, &ch)) {
+			class = ch.res_class ? ch.res_class : broken;
+			instance = ch.res_name ? ch.res_name : broken;
+			for(i = 0; i < LENGTH(rules); i++) {
+				r = &rules[i];
+				if((!r->title || strstr(c->name, r->title))
+				&& (!r->class || strstr(class, r->class))
+				&& (!r->instance || strstr(instance, r->instance)))
+					c->tags |= r->tags;
+			}
+			if(ch.res_class)
+				XFree(ch.res_class);
+			if(ch.res_name)
+				XFree(ch.res_name);
+		}
+		c->tags = c->tags & TAGMASK ? c->tags & TAGMASK : m->tagset[m->seltags];  
+	}
 	attach(c);
 	attachstack(c);
 	focus(NULL);
@@ -1572,9 +1596,16 @@
 
 void
 tagmon(const Arg *arg) {
+	Monitor *m;
+
 	if(!selmon->sel || !mons->next)
 		return;
-	sendmon(selmon->sel, dirtomon(arg->i));
+	m = dirtomon(arg->i);
+	if(selmon->sel->isfloating) {
+		selmon->sel->x += m->mx - selmon->mx;
+		selmon->sel->y += m->my - selmon->my;
+	}
+	sendmon(selmon->sel, m, True);
 }
 
 int
